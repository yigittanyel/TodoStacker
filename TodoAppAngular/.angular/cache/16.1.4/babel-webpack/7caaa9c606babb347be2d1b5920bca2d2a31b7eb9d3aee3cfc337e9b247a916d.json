{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TodoServiceService {\n  constructor(apiUrl, http) {\n    this.apiUrl = apiUrl;\n    this.http = http;\n    this.todos = [];\n  }\n  getTodos() {\n    this.http.get(this.apiUrl + 'GetTodos').subscribe(res => {\n      this.todos = res; // Güncellenmiş verileri burada alıyoruz\n    }, error => {\n      console.error('Veriler alınırken hata oluştu:', error);\n    });\n  }\n  getTodoItem(id) {\n    this.http.get(this.apiUrl + 'GetTodo/' + id).subscribe(res => {\n      let index = this.todos.findIndex(t => t.id == res.id);\n      this.todos[index] = res;\n    });\n  }\n  addTodoItem(todoItem) {\n    this.http.post(this.apiUrl + 'CreateTodo', todoItem).subscribe(res => {\n      this.todos.push(res);\n    });\n  }\n  deleteTodoItem(id) {\n    this.http.delete(this.apiUrl + 'DeleteTodo/' + id).subscribe(res => {\n      let index = this.todos.findIndex(t => t.id == res.id);\n      this.todos.splice(index, 1);\n    });\n  }\n  updateTodoItem(id, todoItem) {\n    this.http.put(this.apiUrl + 'UpdateTodo/' + id, todoItem).subscribe(res => {\n      let index = this.todos.findIndex(t => t.id == res.id);\n      this.todos[index] = res;\n    });\n  }\n}\nTodoServiceService.ɵfac = function TodoServiceService_Factory(t) {\n  return new (t || TodoServiceService)(i0.ɵɵinject('apiUrl'), i0.ɵɵinject(i1.HttpClient));\n};\nTodoServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TodoServiceService,\n  factory: TodoServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["TodoServiceService","constructor","apiUrl","http","todos","getTodos","get","subscribe","res","error","console","getTodoItem","id","index","findIndex","t","addTodoItem","todoItem","post","push","deleteTodoItem","delete","splice","updateTodoItem","put","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\TrialProjects\\CardAppRecap\\src\\app\\Services\\todo-service.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { TodoItem } from '../Models/todo-item';\nimport { TodoCreateItem } from '../Models/todo-create-item';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoServiceService {\n\n  constructor(\n    @Inject('apiUrl') private apiUrl: string,\n    private http: HttpClient\n  ) { }\n\n  todos: TodoItem[]=[];\n\n  getTodos(): void {\n    this.http.get<TodoItem[]>(this.apiUrl + 'GetTodos').subscribe(\n      (res: TodoItem[]) => {\n        this.todos = res; // Güncellenmiş verileri burada alıyoruz\n      },\n      (error) => {\n        console.error('Veriler alınırken hata oluştu:', error);\n      }\n    );\n  }\n  \n\n  getTodoItem(id: number):void {\n    this.http.get<TodoItem>(this.apiUrl + 'GetTodo/' + id)\n    .subscribe((res: TodoItem) => {\n      let index = this.todos.findIndex(t => t.id == res.id);\n      this.todos[index] = res;\n    });\n  }\n\n  addTodoItem(todoItem: TodoCreateItem):void {\n    this.http.post<TodoItem>(this.apiUrl + 'CreateTodo', todoItem)\n    .subscribe((res: TodoItem) => {\n       this.todos.push(res);\n      });\n  }\n\n  deleteTodoItem(id: number):void {\n    this.http.delete<TodoItem>(this.apiUrl + 'DeleteTodo/' + id)\n    .subscribe((res: TodoItem) => {\n      let index =  this.todos.findIndex(t => t.id == res.id);\n      this.todos.splice(index, 1);\n    });\n  }\n\n  updateTodoItem(id:number,todoItem: TodoItem):void {\n    this.http.put<TodoItem>(this.apiUrl + 'UpdateTodo/' + id, todoItem)\n    .subscribe( (res: TodoItem) => {\n      let index = this.todos.findIndex(t => t.id == res.id);\n      this.todos[index] = res;\n    });\n  }\n\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,kBAAkB;EAE7BC,YAC4BC,MAAc,EAChCC,IAAgB;IADE,KAAAD,MAAM,GAANA,MAAM;IACxB,KAAAC,IAAI,GAAJA,IAAI;IAGd,KAAAC,KAAK,GAAa,EAAE;EAFhB;EAIJC,QAAQA,CAAA;IACN,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,IAAI,CAACJ,MAAM,GAAG,UAAU,CAAC,CAACK,SAAS,CAC1DC,GAAe,IAAI;MAClB,IAAI,CAACJ,KAAK,GAAGI,GAAG,CAAC,CAAC;IACpB,CAAC,EACAC,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD,CAAC,CACF;EACH;EAGAE,WAAWA,CAACC,EAAU;IACpB,IAAI,CAACT,IAAI,CAACG,GAAG,CAAW,IAAI,CAACJ,MAAM,GAAG,UAAU,GAAGU,EAAE,CAAC,CACrDL,SAAS,CAAEC,GAAa,IAAI;MAC3B,IAAIK,KAAK,GAAG,IAAI,CAACT,KAAK,CAACU,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,IAAIJ,GAAG,CAACI,EAAE,CAAC;MACrD,IAAI,CAACR,KAAK,CAACS,KAAK,CAAC,GAAGL,GAAG;IACzB,CAAC,CAAC;EACJ;EAEAQ,WAAWA,CAACC,QAAwB;IAClC,IAAI,CAACd,IAAI,CAACe,IAAI,CAAW,IAAI,CAAChB,MAAM,GAAG,YAAY,EAAEe,QAAQ,CAAC,CAC7DV,SAAS,CAAEC,GAAa,IAAI;MAC1B,IAAI,CAACJ,KAAK,CAACe,IAAI,CAACX,GAAG,CAAC;IACrB,CAAC,CAAC;EACN;EAEAY,cAAcA,CAACR,EAAU;IACvB,IAAI,CAACT,IAAI,CAACkB,MAAM,CAAW,IAAI,CAACnB,MAAM,GAAG,aAAa,GAAGU,EAAE,CAAC,CAC3DL,SAAS,CAAEC,GAAa,IAAI;MAC3B,IAAIK,KAAK,GAAI,IAAI,CAACT,KAAK,CAACU,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,IAAIJ,GAAG,CAACI,EAAE,CAAC;MACtD,IAAI,CAACR,KAAK,CAACkB,MAAM,CAACT,KAAK,EAAE,CAAC,CAAC;IAC7B,CAAC,CAAC;EACJ;EAEAU,cAAcA,CAACX,EAAS,EAACK,QAAkB;IACzC,IAAI,CAACd,IAAI,CAACqB,GAAG,CAAW,IAAI,CAACtB,MAAM,GAAG,aAAa,GAAGU,EAAE,EAAEK,QAAQ,CAAC,CAClEV,SAAS,CAAGC,GAAa,IAAI;MAC5B,IAAIK,KAAK,GAAG,IAAI,CAACT,KAAK,CAACU,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,IAAIJ,GAAG,CAACI,EAAE,CAAC;MACrD,IAAI,CAACR,KAAK,CAACS,KAAK,CAAC,GAAGL,GAAG;IACzB,CAAC,CAAC;EACJ;;AAlDWR,kBAAkB,C;mBAAlBA,kBAAkB,EAAAyB,EAAA,CAAAC,QAAA,CAGnB,QAAQ,GAAAD,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAHP5B,kBAAkB,C;SAAlBA,kBAAkB;EAAA6B,OAAA,EAAlB7B,kBAAkB,CAAA8B,IAAA;EAAAC,UAAA,EAFjB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}